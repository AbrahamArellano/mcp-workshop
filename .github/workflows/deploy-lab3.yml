# GitHub Actions workflow for deploying Lab 3 to AWS
name: Deploy Lab 3 to AWS

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region to deploy to'
        required: true
        default: 'us-west-2'
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - eu-west-1
          - eu-central-1
          - ap-northeast-1
          - ap-southeast-1
          - ap-southeast-2

env:
  TF_WORKING_DIR: ./lab03-aws-cloud-deployment/terraform
  PRODUCT_SERVER_DIR: ./lab03-aws-cloud-deployment/src/product-server
  ORDER_SERVER_DIR: ./lab03-aws-cloud-deployment/src/order-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Create S3 bucket for Terraform state
        run: |
          # Create S3 bucket for Terraform state if it doesn't exist
          aws s3api head-bucket --bucket mcp-workshop-tf-state-${{ github.repository_owner }} 2>/dev/null || \
          aws s3api create-bucket \
            --bucket mcp-workshop-tf-state-${{ github.repository_owner }} \
            --region ${{ github.event.inputs.aws_region }} \
            --create-bucket-configuration LocationConstraint=${{ github.event.inputs.aws_region }}
          
          # Enable versioning on the bucket
          aws s3api put-bucket-versioning \
            --bucket mcp-workshop-tf-state-${{ github.repository_owner }} \
            --versioning-configuration Status=Enabled
      
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=mcp-workshop-tf-state-${{ github.repository_owner }}" \
            -backend-config="key=lab03/terraform.tfstate" \
            -backend-config="region=${{ github.event.inputs.aws_region }}"

      - name: Terraform Apply ECR Only
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Create only the ECR repositories first
          terraform apply -auto-approve -var="aws_region=${{ github.event.inputs.aws_region }}" -var="github_repository=${{ github.repository }}" -target=aws_ecr_repository.product_repository -target=aws_ecr_repository.order_repository

      - name: Get ECR Repository URLs
        id: ecr-urls
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Set environment variables for ECR repository URLs
          PRODUCT_REPO_URL=$(terraform output -raw product_repository_url)
          ORDER_REPO_URL=$(terraform output -raw order_repository_url)
          # Remove any debug output that might be appended
          PRODUCT_REPO_URL=$(echo "$PRODUCT_REPO_URL" | grep -o '^[^:]*\.dkr\.ecr\.[^/]*/[^[:space:]]*')
          ORDER_REPO_URL=$(echo "$ORDER_REPO_URL" | grep -o '^[^:]*\.dkr\.ecr\.[^/]*/[^[:space:]]*')
          echo "PRODUCT_ECR_REPO=$PRODUCT_REPO_URL" >> $GITHUB_ENV
          echo "ORDER_ECR_REPO=$ORDER_REPO_URL" >> $GITHUB_ENV
          # Debug output
          echo "Product ECR URL: $PRODUCT_REPO_URL"
          echo "Order ECR URL: $ORDER_REPO_URL"

      - name: Validate ECR Repository URLs
        run: |
          if [ -z "$PRODUCT_ECR_REPO" ] || [ -z "$ORDER_ECR_REPO" ]; then
            echo "::error::ECR repository URLs are not properly set"
            echo "PRODUCT_ECR_REPO: $PRODUCT_ECR_REPO"
            echo "ORDER_ECR_REPO: $ORDER_ECR_REPO"
            exit 1
          fi
          echo "ECR repository URLs are valid:"
          echo "PRODUCT_ECR_REPO: $PRODUCT_ECR_REPO"
          echo "ORDER_ECR_REPO: $ORDER_ECR_REPO"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Product Server image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.PRODUCT_SERVER_DIR }}
          push: true
          tags: ${{ env.PRODUCT_ECR_REPO }}:latest

      - name: Build and push Order Server image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.ORDER_SERVER_DIR }}
          push: true
          tags: ${{ env.ORDER_ECR_REPO }}:latest
          
      - name: Terraform Apply Remaining Resources
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Now deploy the rest of the infrastructure
          terraform apply -auto-approve -var="aws_region=${{ github.event.inputs.aws_region }}" -var="github_repository=${{ github.repository }}"

      - name: Get ALB Endpoints
        working-directory: ${{ env.TF_WORKING_DIR }}
        id: get-alb-endpoints
        run: |
          echo "PRODUCT_ALB=$(terraform output -raw product_alb_dns)" >> $GITHUB_ENV
          echo "ORDER_ALB=$(terraform output -raw order_alb_dns)" >> $GITHUB_ENV

      - name: Output Claude Desktop Configuration
        run: |
          echo "âœ… Deployment Complete!"
          echo ""
          echo "Add the following to your Claude Desktop configuration:"
          echo ""
          echo '{
            "mcpServers": {
              "aws-product-server": {
                "url": "https://${{ env.PRODUCT_ALB }}/mcp"
              },
              "aws-order-server": {
                "url": "https://${{ env.ORDER_ALB }}/mcp"
              }
            }
          }'
          echo ""
          echo "Then restart Claude Desktop to connect to your cloud-hosted MCP servers."
