# GitHub Actions workflow for deploying MCP Workshop Labs to AWS
name: Deploy MCP Workshop Lab to AWS

on:
  workflow_dispatch:
    inputs:
      lab_number:
        description: 'Lab number to deploy'
        required: true
        default: '3'
        type: choice
        options:
          - '3'
          # Add more lab options as they become available
      aws_region:
        description: 'AWS Region to deploy to'
        required: true
        default: 'us-west-2'
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - eu-west-1
          - eu-central-1
          - ap-northeast-1
          - ap-southeast-1
          - ap-southeast-2

env:
  TF_WORKING_DIR: ${{ format('./lab0{0}-aws-cloud-deployment/terraform', inputs.lab_number) }}
  PRODUCT_SERVER_DIR: ${{ format('./lab0{0}-aws-cloud-deployment/src/product-server', inputs.lab_number) }}
  ORDER_SERVER_DIR: ${{ format('./lab0{0}-aws-cloud-deployment/src/order-server', inputs.lab_number) }}
  BEDROCK_CLIENT_DIR: ${{ format('./lab0{0}-aws-cloud-deployment/src/bedrock-client', inputs.lab_number) }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Create S3 bucket for Terraform state
        run: |
          # Create S3 bucket for Terraform state if it doesn't exist
          aws s3api head-bucket --bucket mcp-workshop-tf-state-${{ github.repository_owner }} 2>/dev/null || \
          aws s3api create-bucket \
            --bucket mcp-workshop-tf-state-${{ github.repository_owner }} \
            --region ${{ github.event.inputs.aws_region }} \
            --create-bucket-configuration LocationConstraint=${{ github.event.inputs.aws_region }}
          
          # Enable versioning on the bucket
          aws s3api put-bucket-versioning \
            --bucket mcp-workshop-tf-state-${{ github.repository_owner }} \
            --versioning-configuration Status=Enabled
      
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=mcp-workshop-tf-state-${{ github.repository_owner }}" \
            -backend-config="key=lab0${{ github.event.inputs.lab_number }}/terraform.tfstate" \
            -backend-config="region=${{ github.event.inputs.aws_region }}"

      - name: Terraform Apply ECR Only
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Create only the ECR repositories first
          terraform apply -auto-approve -var="aws_region=${{ github.event.inputs.aws_region }}" -var="github_repository=${{ github.repository }}" -target=aws_ecr_repository.product_repository -target=aws_ecr_repository.order_repository -target=aws_ecr_repository.bedrock_client

      - name: Get ECR Repository URLs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Hardcode the ECR repository URLs based on the repository names
          # This avoids issues with Terraform output parsing
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=${{ github.event.inputs.aws_region }}
          
          # Set environment variables for ECR repository URLs
          echo "PRODUCT_ECR_REPO=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/mcp-product-server" >> $GITHUB_ENV
          echo "ORDER_ECR_REPO=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/mcp-order-server" >> $GITHUB_ENV
          echo "BEDROCK_CLIENT_ECR_REPO=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/bedrock-client" >> $GITHUB_ENV
          
          # Debug output
          echo "Product ECR URL: ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/mcp-product-server"
          echo "Order ECR URL: ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/mcp-order-server"
          echo "Bedrock Client ECR URL: ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/bedrock-client"

      - name: Validate ECR Repository URLs
        run: |
          if [ -z "$PRODUCT_ECR_REPO" ] || [ -z "$ORDER_ECR_REPO" ] || [ -z "$BEDROCK_CLIENT_ECR_REPO" ]; then
            echo "::error::ECR repository URLs are not properly set"
            echo "PRODUCT_ECR_REPO: $PRODUCT_ECR_REPO"
            echo "ORDER_ECR_REPO: $ORDER_ECR_REPO"
            echo "BEDROCK_CLIENT_ECR_REPO: $BEDROCK_CLIENT_ECR_REPO"
            exit 1
          fi
          echo "ECR repository URLs are valid:"
          echo "PRODUCT_ECR_REPO: $PRODUCT_ECR_REPO"
          echo "ORDER_ECR_REPO: $ORDER_ECR_REPO"
          echo "BEDROCK_CLIENT_ECR_REPO: $BEDROCK_CLIENT_ECR_REPO"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Product Server image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.PRODUCT_SERVER_DIR }}
          push: true
          tags: ${{ env.PRODUCT_ECR_REPO }}:latest

      - name: Build and push Order Server image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.ORDER_SERVER_DIR }}
          push: true
          tags: ${{ env.ORDER_ECR_REPO }}:latest
          
      - name: Build and push Bedrock Client image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BEDROCK_CLIENT_DIR }}
          push: true
          tags: ${{ env.BEDROCK_CLIENT_ECR_REPO }}:latest
          build-args: |
            COMMIT_ID=${{ github.sha }}
          
      - name: Terraform Apply Remaining Resources
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Now deploy the rest of the infrastructure
          terraform apply -auto-approve -var="aws_region=${{ github.event.inputs.aws_region }}" -var="github_repository=${{ github.repository }}"
          
      - name: Force ECS Service Updates
        run: |
          # Set default region if not provided
          AWS_REGION="${AWS_REGION:-us-west-2}"
          
          echo "Verifying ECS services exist before updating..."
          # List services in the cluster to verify they exist
          SERVICES=$(aws ecs list-services --cluster mcp-workshop-cluster --region $AWS_REGION --output text)
          echo "Found services: $SERVICES"
          
          # Add a short delay to ensure services are fully created
          echo "Waiting for services to be fully created..."
          sleep 30
          
          # Try to update the product service
          echo "Updating product-service..."
          if aws ecs describe-services --cluster mcp-workshop-cluster --services product-service --region $AWS_REGION | grep -q "ACTIVE"; then
            aws ecs update-service --cluster mcp-workshop-cluster --service product-service --force-new-deployment --region $AWS_REGION
            echo "Product service update initiated"
          else
            echo "Product service not found or not active, skipping update"
          fi
          
          # Try to update the order service
          echo "Updating order-service..."
          if aws ecs describe-services --cluster mcp-workshop-cluster --services order-service --region $AWS_REGION | grep -q "ACTIVE"; then
            aws ecs update-service --cluster mcp-workshop-cluster --service order-service --force-new-deployment --region $AWS_REGION
            echo "Order service update initiated"
          else
            echo "Order service not found or not active, skipping update"
          fi
          
          # Try to update the bedrock client service
          echo "Updating bedrock-client service..."
          if aws ecs describe-services --cluster mcp-workshop-cluster --services bedrock-client --region $AWS_REGION | grep -q "ACTIVE"; then
            aws ecs update-service --cluster mcp-workshop-cluster --service bedrock-client --force-new-deployment --region $AWS_REGION
            echo "Bedrock client service update initiated"
          else
            echo "Bedrock client service not found or not active, skipping update"
          fi
          
          echo "Waiting for services to stabilize..."
          aws ecs wait services-stable --cluster mcp-workshop-cluster --services product-service order-service bedrock-client --region $AWS_REGION || echo "Warning: Not all services stabilized, but continuing workflow"

      - name: Get ALB Endpoints
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Get the ALB DNS names directly from individual outputs and clean any debug output
          PRODUCT_ALB=$(terraform output -raw product_alb_dns | grep -o '[^:]*\.elb\.amazonaws\.com' | head -1)
          ORDER_ALB=$(terraform output -raw order_alb_dns | grep -o '[^:]*\.elb\.amazonaws\.com' | head -1)
          BEDROCK_CLIENT_ALB=$(terraform output -raw bedrock_client_url | grep -o '[^:]*\.elb\.amazonaws\.com' | head -1)
          
          # Verify we have valid ALB DNS names
          if [[ -z "$PRODUCT_ALB" || -z "$ORDER_ALB" || -z "$BEDROCK_CLIENT_ALB" ]]; then
            echo "Error: Failed to extract valid ALB DNS names"
            exit 1
          fi
          
          echo "PRODUCT_ALB=$PRODUCT_ALB" >> $GITHUB_ENV
          echo "ORDER_ALB=$ORDER_ALB" >> $GITHUB_ENV
          echo "BEDROCK_CLIENT_ALB=$BEDROCK_CLIENT_ALB" >> $GITHUB_ENV
          
          echo "Product ALB: $PRODUCT_ALB"
          echo "Order ALB: $ORDER_ALB"
          echo "Bedrock Client ALB: $BEDROCK_CLIENT_ALB"

      - name: Output Deployment Information
        run: |
          echo "✅ Deployment Complete!"
          echo ""
          echo "============================================"
          echo "🔗 BEDROCK CLIENT URL: http://${{ env.BEDROCK_CLIENT_ALB }}"
          echo "============================================"
          echo ""
          echo "MCP Server Endpoints:"
          echo "- Product Server: https://${{ env.PRODUCT_ALB }}/mcp"
          echo "- Order Server: https://${{ env.ORDER_ALB }}/mcp"
          echo ""
          echo "Claude Desktop Configuration (if needed):"
          echo '{
            "mcpServers": {
              "aws-product-server": {
                "url": "https://${{ env.PRODUCT_ALB }}/mcp"
              },
              "aws-order-server": {
                "url": "https://${{ env.ORDER_ALB }}/mcp"
              }
            }
          }'
