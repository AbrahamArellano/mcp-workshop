# GitHub Actions workflow for deploying MCP Workshop Labs to AWS
name: Deploy MCP Workshop Lab to AWS

on:
  workflow_dispatch:
    inputs:
      lab_number:
        description: 'Lab number to deploy'
        required: true
        default: '3'
        type: choice
        options:
          - '3'
      aws_region:
        description: 'AWS Region to deploy to'
        required: true
        default: 'us-west-2'
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - eu-west-1
          - eu-central-1
          - ap-northeast-1
          - ap-southeast-1
          - ap-southeast-2

env:
  TF_WORKING_DIR: ${{ format('./lab0{0}-aws-cloud-deployment/terraform', inputs.lab_number) }}
  PRODUCT_SERVER_DIR: ${{ format('./lab0{0}-aws-cloud-deployment/src/product-server', inputs.lab_number) }}
  ORDER_SERVER_DIR: ${{ format('./lab0{0}-aws-cloud-deployment/src/order-server', inputs.lab_number) }}
  BEDROCK_CLIENT_DIR: ${{ format('./lab0{0}-aws-cloud-deployment/src/bedrock-client', inputs.lab_number) }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Create S3 bucket for Terraform state
        run: |
          # Create S3 bucket for Terraform state if it doesn't exist
          aws s3api head-bucket --bucket mcp-workshop-tf-state-${{ github.repository_owner }} 2>/dev/null || \
          aws s3api create-bucket \
            --bucket mcp-workshop-tf-state-${{ github.repository_owner }} \
            --region ${{ github.event.inputs.aws_region }} \
            --create-bucket-configuration LocationConstraint=${{ github.event.inputs.aws_region }}
          
          # Enable versioning on the bucket
          aws s3api put-bucket-versioning \
            --bucket mcp-workshop-tf-state-${{ github.repository_owner }} \
            --versioning-configuration Status=Enabled
      
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=mcp-workshop-tf-state-${{ github.repository_owner }}" \
            -backend-config="key=lab0${{ github.event.inputs.lab_number }}/terraform.tfstate" \
            -backend-config="region=${{ github.event.inputs.aws_region }}"

      - name: Terraform Apply ECR Only
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Create only the ECR repositories first
          terraform apply -auto-approve -var="aws_region=${{ github.event.inputs.aws_region }}" -var="github_repository=${{ github.repository }}" -target=aws_ecr_repository.bedrock_client

      - name: Get ECR Repository URLs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Get the ECR repository URL for the Bedrock client
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=${{ github.event.inputs.aws_region }}
          
          # Set environment variables for ECR repository URLs
          export BEDROCK_CLIENT_ECR_REPO=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/bedrock-client
          
          echo "BEDROCK_CLIENT_ECR_REPO=${BEDROCK_CLIENT_ECR_REPO}" >> $GITHUB_ENV
          
          echo "Bedrock Client ECR URL: ${BEDROCK_CLIENT_ECR_REPO}"

      - name: Validate ECR Repository URLs
        run: |
          if [ -z "$BEDROCK_CLIENT_ECR_REPO" ]; then
            echo "Error: Failed to get ECR repository URLs"
            exit 1
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Bedrock Client image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BEDROCK_CLIENT_DIR }}
          push: true
          tags: ${{ env.BEDROCK_CLIENT_ECR_REPO }}:latest

      - name: Install Node.js for Lambda functions
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for Product Server
        working-directory: ${{ env.PRODUCT_SERVER_DIR }}
        run: npm install

      - name: Install dependencies for Order Server
        working-directory: ${{ env.ORDER_SERVER_DIR }}
        run: npm install

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Now deploy the rest of the infrastructure
          terraform apply -auto-approve -var="aws_region=${{ github.event.inputs.aws_region }}" -var="github_repository=${{ github.repository }}"
          
      - name: Force ECS Service Updates
        run: |
          # Set default region if not provided
          AWS_REGION="${AWS_REGION:-${{ github.event.inputs.aws_region }}}"
          
          echo "Verifying ECS services exist before updating..."
          # List services in the cluster to verify they exist
          aws ecs list-services --cluster mcp-workshop-cluster --region $AWS_REGION
          
          # Try to update the Bedrock client service
          echo "Updating bedrock-client service..."
          if aws ecs describe-services --cluster mcp-workshop-cluster --services bedrock-client --region $AWS_REGION | grep -q "ACTIVE"; then
            aws ecs update-service --cluster mcp-workshop-cluster --service bedrock-client --force-new-deployment --region $AWS_REGION
            echo "Bedrock client service update initiated"
          else
            echo "Bedrock client service not found or not active, skipping update"
          fi
          
          echo "Waiting for services to stabilize..."
          aws ecs wait services-stable --cluster mcp-workshop-cluster --services bedrock-client --region $AWS_REGION || echo "Warning: Not all services stabilized, but continuing workflow"

      - name: Get Endpoints
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Get the Bedrock client ALB DNS name
          BEDROCK_CLIENT_ALB=$(terraform output -raw bedrock_client_url | grep -o '[^:]*\.elb\.amazonaws\.com' | head -1)
          
          # Get the Lambda-based MCP server endpoints
          PRODUCT_LAMBDA_ENDPOINT=$(terraform output -raw product_server_lambda_endpoint)
          ORDER_LAMBDA_ENDPOINT=$(terraform output -raw order_server_lambda_endpoint)
          
          # Verify we have valid endpoints
          if [[ -z "$BEDROCK_CLIENT_ALB" || -z "$PRODUCT_LAMBDA_ENDPOINT" || -z "$ORDER_LAMBDA_ENDPOINT" ]]; then
            echo "Error: Failed to extract valid endpoints"
            exit 1
          fi
          
          echo "BEDROCK_CLIENT_ALB=$BEDROCK_CLIENT_ALB" >> $GITHUB_ENV
          echo "PRODUCT_LAMBDA_ENDPOINT=$PRODUCT_LAMBDA_ENDPOINT" >> $GITHUB_ENV
          echo "ORDER_LAMBDA_ENDPOINT=$ORDER_LAMBDA_ENDPOINT" >> $GITHUB_ENV
          
          echo "Bedrock Client ALB: $BEDROCK_CLIENT_ALB"
          echo "Product Lambda Endpoint: $PRODUCT_LAMBDA_ENDPOINT"
          echo "Order Lambda Endpoint: $ORDER_LAMBDA_ENDPOINT"

      - name: Output Deployment Information
        run: |
          # Make sure we have the endpoints available in this step
          BEDROCK_CLIENT_ALB_URL="${BEDROCK_CLIENT_ALB:-${{ env.BEDROCK_CLIENT_ALB }}}"
          PRODUCT_LAMBDA_ENDPOINT="${PRODUCT_LAMBDA_ENDPOINT:-${{ env.PRODUCT_LAMBDA_ENDPOINT }}}"
          ORDER_LAMBDA_ENDPOINT="${ORDER_LAMBDA_ENDPOINT:-${{ env.ORDER_LAMBDA_ENDPOINT }}}"
          
          echo "âœ… Deployment Complete!"
          echo ""
          echo "============================================"
          echo "ðŸ”— BEDROCK CLIENT URL: http://${BEDROCK_CLIENT_ALB_URL}"
          echo "============================================"
          echo ""
          echo "MCP Server Endpoints (Lambda-based):"
          echo "- Product Server: ${PRODUCT_LAMBDA_ENDPOINT}"
          echo "- Order Server: ${ORDER_LAMBDA_ENDPOINT}"
          echo ""
          echo "Claude Desktop Configuration:"
          echo '{
            "mcpServers": {
              "aws-product-server": {
                "url": "'"${PRODUCT_LAMBDA_ENDPOINT}"'"
              },
              "aws-order-server": {
                "url": "'"${ORDER_LAMBDA_ENDPOINT}"'"
              }
            }
          }'
          echo ""
          echo "MCP Workshop Implementation:"
          echo "This deployment uses:"
          echo "- Serverless MCP servers running on AWS Lambda"
          echo "- Container-based MCP Playground running on ECS/Fargate"
          echo ""
          echo "This approach gives you the flexibility to test both local and cloud-based clients."
