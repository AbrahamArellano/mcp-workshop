name: Deploy Lab 3 to AWS

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region to deploy to'
        required: true
        default: 'us-west-2'
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - eu-west-1
          - eu-central-1
          - ap-northeast-1
          - ap-southeast-1
          - ap-southeast-2

env:
  TF_WORKING_DIR: ./lab03-aws-cloud-deployment/terraform
  PRODUCT_SERVER_DIR: ./lab03-aws-cloud-deployment/src/product-server
  ORDER_SERVER_DIR: ./lab03-aws-cloud-deployment/src/order-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -var="aws_region=${{ github.event.inputs.aws_region }}" -var="github_repository=${{ github.repository }}" -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Get ECR Repository URLs
        working-directory: ${{ env.TF_WORKING_DIR }}
        id: get-ecr-urls
        run: |
          echo "PRODUCT_ECR_REPO=$(terraform output -raw product_repository_url)" >> $GITHUB_ENV
          echo "ORDER_ECR_REPO=$(terraform output -raw order_repository_url)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Product Server image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.PRODUCT_SERVER_DIR }}
          push: true
          tags: ${{ env.PRODUCT_ECR_REPO }}:latest

      - name: Build and push Order Server image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.ORDER_SERVER_DIR }}
          push: true
          tags: ${{ env.ORDER_ECR_REPO }}:latest

      - name: Force new ECS deployment
        run: |
          aws ecs update-service --cluster mcp-workshop-cluster --service product-service --force-new-deployment
          aws ecs update-service --cluster mcp-workshop-cluster --service order-service --force-new-deployment

      - name: Get ALB Endpoints
        working-directory: ${{ env.TF_WORKING_DIR }}
        id: get-alb-endpoints
        run: |
          echo "PRODUCT_ALB=$(terraform output -raw product_alb_dns)" >> $GITHUB_ENV
          echo "ORDER_ALB=$(terraform output -raw order_alb_dns)" >> $GITHUB_ENV

      - name: Output Claude Desktop Configuration
        run: |
          echo "âœ… Deployment Complete!"
          echo ""
          echo "Add the following to your Claude Desktop configuration:"
          echo ""
          echo '{
            "mcpServers": {
              "aws-product-server": {
                "url": "https://${{ env.PRODUCT_ALB }}/mcp"
              },
              "aws-order-server": {
                "url": "https://${{ env.ORDER_ALB }}/mcp"
              }
            }
          }'
          echo ""
          echo "Then restart Claude Desktop to connect to your cloud-hosted MCP servers."
